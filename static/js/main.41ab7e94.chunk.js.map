{"version":3,"sources":["components/Sidebar.js","components/SingleData.js","components/Chart.js","components/Country.js","components/CountryList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","className","SingleData","props","value","type","icon","background","color","style","faMehBlank","numeral","format","faSignal","Chart","state","data","labels","datasets","fetch","then","res","json","keys","Object","cases","values","recovered","setState","label","backgroundColor","borderColor","this","options","responsive","maintainAspectRatio","scales","yAxes","ticks","callback","toUpperCase","Component","Country","name","deaths","flag","redText","num","src","alt","greenText","CountryList","countryStats","sortedHiLo","sort","country1","country2","map","country","id","key","countryInfo","Main","updated","cases_today","todayCases","catch","error","console","log","unix","moment","date","unixToDate","timeUpdated","fromNow","fontSize","faGlobe","faDizzy","faHeart","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.41ab7e94.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <aside className=\"sidebar fixed\">\r\n            Sidebar\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMehBlank, faSignal } from '@fortawesome/free-solid-svg-icons';\r\nimport numeral from \"numeral\";\r\n\r\nconst SingleData = (props) => {\r\n    const value = props.value; // recorded numerical value\r\n    const type = props.type; // what kind of data it was, ex: \"deaths\"\r\n    const icon = props.icon; // icon associated with type of data\r\n    const background = props.background; // color surrounding icon\r\n    const color = props.color; // color of icon\r\n\r\n    return (\r\n        <section className=\"single-data component\">\r\n            <span className=\"text type-of-data block\">{type}</span>\r\n            <div className=\"flex align-center relative\">\r\n                <div className=\"icon-wrap\" style={{background: background}}>\r\n                    <FontAwesomeIcon icon={icon == null ? faMehBlank : icon} style={{color: color}} className=\"icon\"/>\r\n                </div>\r\n                <span className=\"text\">{numeral(value).format(\"0,0\")}</span>\r\n                <div className=\"icon stats-icon absolute\">\r\n                    <FontAwesomeIcon icon={faSignal} style={{color: color}}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"undraw\"></div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SingleData\r\n","import React, { Component } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nexport class Chart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: {\r\n                labels: [],\r\n                datasets: [],\r\n            }\r\n        }\r\n    }\r\n\r\n    // fetch data from past 30 days\r\n    // push into state\r\n    componentDidMount() {\r\n        fetch(\"https://corona.lmao.ninja/v3/covid-19/historical/all\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const keys = Object.keys(data.cases);\r\n                const cases = Object.values(data.cases);\r\n                const recovered = Object.values(data.recovered);\r\n                this.setState({ \r\n                    // must be structured like this for chart.js\r\n                    data: {\r\n                        labels: [...keys],\r\n                        datasets: [{\r\n                            label: \"Cases\",\r\n                            data: [...cases],\r\n                            backgroundColor: \"transparent\",\r\n                            borderColor: \"rgb(130, 122, 243)\"\r\n                        },\r\n                        {\r\n                            label: \"Recovered\",\r\n                            data: [...recovered],\r\n                            backgroundColor: \"transparent\",\r\n                            borderColor: \"rgb(108, 230, 244)\"\r\n                        }]\r\n                    },\r\n                 });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"chart-container component\">\r\n                <Line \r\n                    data={this.state.data}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    callback: function(value) {\r\n                                        return numeral(value).format(\"0a\").toUpperCase();\r\n                                    }\r\n                                }\r\n                            }]\r\n                        }\r\n                    }}\r\n                />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\n\r\nconst Country = (props) => {\r\n\r\n    let { name, cases, deaths, recovered, flag } = props;\r\n\r\n    const redText = num => {\r\n        if (num >= 1000000) {\r\n            return \"red\"\r\n        }\r\n    }\r\n    const greenText = num => {\r\n        if (num >= 1000000) {\r\n            return \"green\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr className=\"flex flex-between country\">\r\n            <td className=\"country-name text\"><div className=\"flag inline-block\"><img src={flag} alt={`${name} Flag`}/></div>{name}</td>\r\n            <td className=\"flex flex-end country-data\"><span className=\"text\" style={{color: redText(cases)}}>{numeral(cases).format(\"0,0\")}</span></td>\r\n            <td className=\"flex flex-end country-data\"><span className=\"text\" style={{color: redText(deaths)}}>{numeral(deaths).format(\"0,0\")}</span></td>\r\n            <td className=\"flex flex-end country-data\"><span className=\"text\" style={{color: greenText(recovered)}}>{numeral(recovered).format(\"0,0\")}</span></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React, { Component } from 'react'\r\nimport Country from './Country';\r\n\r\nexport class CountryList extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            // sorted list high to low\r\n            countryStats: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://corona.lmao.ninja/v3/covid-19/countries\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                // list of countries sorted high to low\r\n                const sortedHiLo = data.sort((country1, country2) => country2.cases - country1.cases);\r\n                this.setState({\r\n                    countryStats: [...sortedHiLo]\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"component\">\r\n                <div className=\"header\">\r\n                    <span>Countries (Highest to Lowest)</span>\r\n                </div>\r\n                <ul className=\"table-header flex\">\r\n                    <li className=\"country-name\"><span className=\"text\">Name</span></li>\r\n                    <li className=\"country-data\"><span className=\"text\">Cases</span></li>\r\n                    <li className=\"country-data\"><span className=\"text\">Deaths</span></li>\r\n                    <li className=\"country-data\"><span className=\"text\">Recovered</span></li>\r\n                </ul>\r\n                <div className=\"y-scroll list-wrap\">\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.countryStats.map((country, id) => <Country key={id} name={country.country} cases={country.cases} deaths={country.deaths} recovered={country.recovered} flag={country.countryInfo.flag}/>)}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryList\r\n","import React, { Component } from 'react'\r\nimport SingleData from './SingleData'\r\nimport Chart from './Chart';\r\nimport CountryList from './CountryList';\r\nimport moment from \"moment\";\r\nimport { faGlobe, faDizzy, faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport class Main extends Component {\r\n    constructor() {\r\n        super();\r\n        \r\n        // this state will only be used for Main and SingleData components\r\n        this.state = {\r\n            updated: \"\",\r\n            cases: \"\",\r\n            deaths: \"\",\r\n            recovered: \"\",\r\n            cases_today: \"\"\r\n        }\r\n    }\r\n\r\n    /*\r\n    fetch wordly data for:\r\n    - last time this data was updated\r\n    - total cases globally\r\n    - total amount of deaths\r\n    - total recovered\r\n    then update state with this info\r\n    */\r\n    componentDidMount() {\r\n        fetch(\"https://corona.lmao.ninja/v3/covid-19/all\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    updated: data.updated,\r\n                    cases: data.cases,\r\n                    deaths: data.deaths,\r\n                    recovered: data.recovered,\r\n                    cases_today: data.todayCases\r\n                });\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    // converts unix time stamp to YYYYMMDD h:mm:ss a\r\n    unixToDate(unix) {\r\n        let formatted = moment(unix).format(\"YYYYMMDD, h:mm:ss a\");\r\n        return formatted; // ex: 20200824 11:59:00 pm\r\n    }\r\n\r\n    render() {\r\n        let date = this.unixToDate(this.state.updated);\r\n        let timeUpdated = moment(date, \"YYYYMMDD, h:mm:ss a\").fromNow(); // ex: 10 minutes ago\r\n        return (\r\n            <main>\r\n                <div className=\"main-container flex direction-column\">\r\n                    <div className=\"last-updated w-100\">\r\n                        <span className=\"text block text-right\" style={{fontSize: \"14px\"}}>last updated: {timeUpdated}</span>\r\n                    </div>\r\n                    <div className=\"chart-layout\">\r\n                        <Chart/>\r\n                        <div className=\"cases-today\">\r\n                            <SingleData value={this.state.cases_today} type=\"Cases Today\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"single-data-section\">\r\n                        <SingleData value={this.state.cases} type=\"Total Cases\" icon={faGlobe} color=\"#827af3\" background=\"rgba(130, 122, 243, 0.2)\"/>\r\n                        <SingleData value={this.state.deaths} type=\"Deaths\" icon={faDizzy} color=\"#f14336\" background=\"rgba(241, 67, 54, 0.1)\"/>\r\n                        <SingleData value={this.state.recovered} type=\"Recovered\" icon={faHeart} color=\"#ffd369\" background=\"rgba(255, 211, 105, 0.125)\"/>\r\n\r\n                    </div>\r\n                    <div className=\"country-list\">\r\n                        <CountryList/>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n\r\n","import React from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport Main from './components/Main';\r\nimport \"./sass/main.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Sidebar/>\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}